import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';

class SystemsPage extends StatefulWidget {
  const SystemsPage({super.key});

  @override
  State<SystemsPage> createState() => _SystemsPageState();
}

class _SystemsPageState extends State<SystemsPage> with SingleTickerProviderStateMixin {
  // List of system titles
  final List<String> systemItems = ['System ALPHA-X', 'Neural-BET v2', 'Quantum Predictor'];

  // Performance values for systems (win rate percentage)
  final List<double> systemValues = [76.5, 82.3, 91.8];

  // Sample ROI data
  final List<FlSpot> roiData = [
    const FlSpot(0, 65),
    const FlSpot(1, 72),
    const FlSpot(2, 85),
    const FlSpot(3, 78),
    const FlSpot(4, 92),
    const FlSpot(5, 88),
  ];

  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);
    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: _buildFuturisticAppBar(context),
      body: Stack(
        children: [
          // Animated background grid
          _buildCyberGrid(),
          
          // Main content
          SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: Column(
                children: [
                  const SizedBox(height: 20),
                  _buildSystemsOverview(),
                  const SizedBox(height: 20),
                  _buildPerformanceSection(),
                  const SizedBox(height: 20),
                  _buildROIChart(),
                  const SizedBox(height: 80), // Space for FAB
                ],
              ),
            ),
          ),
          
          // Floating Create Button
          _buildFloatingActionButton(),
        ],
      ),
    );
  }

  PreferredSizeWidget _buildFuturisticAppBar(BuildContext context) {
    return AppBar(
      backgroundColor: Colors.black,
      elevation: 0,
      title: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          _buildPulsingDot(),
          const SizedBox(width: 10),
          Text(
            "SYSTEMS.999999",
            style: TextStyle(
              color: Theme.of(context).colorScheme.primary,
              fontWeight: FontWeight.bold,
              letterSpacing: 3,
            ),
          ),
        ],
      ),
      centerTitle: true,
      actions: [
        IconButton(
          icon: Icon(
            Icons.analytics_outlined,
            color: Theme.of(context).colorScheme.primary,
          ),
          onPressed: () {},
        ),
      ],
    );
  }

  Widget _buildPulsingDot() {
    return TweenAnimationBuilder<double>(
      tween: Tween(begin: 0.5, end: 1.0),
      duration: const Duration(seconds: 1),
      builder: (context, value, child) {
        return Container(
          width: 10,
          height: 10,
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            boxShadow: [
              BoxShadow(
                color: Theme.of(context).colorScheme.primary.withOpacity(0.5 * value),
                blurRadius: 10,
                spreadRadius: 2,
              ),
            ],
            color: Theme.of(context).colorScheme.primary,
          ),
        );
      },
      onEnd: () {},
    );
  }

  Widget _buildCyberGrid() {
    return CustomPaint(
      painter: CyberGridPainter(
        color: Theme.of(context).colorScheme.primary.withOpacity(0.05),
      ),
      child: Container(),
    );
  }
Widget _buildPerformanceSection() {
  return Container(
    padding: const EdgeInsets.all(20),
    decoration: BoxDecoration(
      color: Colors.black,
      borderRadius: BorderRadius.circular(15),
      border: Border.all(
        color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
        width: 1,
      ),
      boxShadow: [
        BoxShadow(
          color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
          blurRadius: 20,
          spreadRadius: -5,
        ),
      ],
    ),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'PERFORMANCE METRICS',
          style: TextStyle(
            color: Theme.of(context).colorScheme.primary,
            fontSize: 16,
            fontWeight: FontWeight.bold,
            letterSpacing: 2,
          ),
        ),
        const SizedBox(height: 20),
        Row(
          children: [
            Expanded(
              child: _buildMetricCard(
                'Win Rate',
                '83.7%',
                Icons.trending_up,
                Colors.green,
              ),
            ),
            const SizedBox(width: 10),
            Expanded(
              child: _buildMetricCard(
                'ROI',
                '+27.4%',
                Icons.analytics,
                Colors.blue,
              ),
            ),
          ],
        ),
        const SizedBox(height: 10),
        Row(
          children: [
            Expanded(
              child: _buildMetricCard(
                'Active Bets',
                '14',
                Icons.sports_basketball,
                Colors.orange,
              ),
            ),
            const SizedBox(width: 10),
            Expanded(
              child: _buildMetricCard(
                'Profit',
                '\$1,842',
                Icons.attach_money,
                Colors.purple,
              ),
            ),
          ],
        ),
        const SizedBox(height: 20),
        _buildRecentActivity(),
      ],
    ),
  );
}

Widget _buildMetricCard(String title, String value, IconData icon, Color accentColor) {
  return Container(
    padding: const EdgeInsets.all(15),
    decoration: BoxDecoration(
      color: Colors.black,
      borderRadius: BorderRadius.circular(12),
      border: Border.all(
        color: accentColor.withOpacity(0.3),
        width: 1,
      ),
      boxShadow: [
        BoxShadow(
          color: accentColor.withOpacity(0.1),
          blurRadius: 10,
          spreadRadius: -5,
        ),
      ],
    ),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(
              icon,
              color: accentColor,
              size: 20,
            ),
            const SizedBox(width: 8),
            Text(
              title,
              style: TextStyle(
                color: Colors.white.withOpacity(0.7),
                fontSize: 14,
              ),
            ),
          ],
        ),
        const SizedBox(height: 10),
        Text(
          value,
          style: TextStyle(
            color: accentColor,
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
        ),
      ],
    ),
  );
}

Widget _buildRecentActivity() {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Text(
        'RECENT ACTIVITY',
        style: TextStyle(
          color: Theme.of(context).colorScheme.primary,
          fontSize: 16,
          fontWeight: FontWeight.bold,
          letterSpacing: 2,
        ),
      ),
      const SizedBox(height: 15),
      ...List.generate(
        3,
        (index) => _buildActivityItem(
          title: 'System ALPHA-X Prediction',
          subtitle: 'Lakers vs Warriors | ML: Lakers -110',
          time: '2h ago',
          status: index % 2 == 0 ? 'WIN' : 'PENDING',
          statusColor: index % 2 == 0 ? Colors.green : Colors.orange,
        ),
      ),
    ],
  );
}

Widget _buildActivityItem({
  required String title,
  required String subtitle,
  required String time,
  required String status,
  required Color statusColor,
}) {
  return Container(
    margin: const EdgeInsets.only(bottom: 10),
    padding: const EdgeInsets.all(12),
    decoration: BoxDecoration(
      color: Colors.black,
      borderRadius: BorderRadius.circular(10),
      border: Border.all(
        color: Theme.of(context).colorScheme.primary.withOpacity(0.2),
      ),
    ),
    child: Row(
      children: [
        Container(
          width: 40,
          height: 40,
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(
            Icons.sports_basketball,
            color: Theme.of(context).colorScheme.primary,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                subtitle,
                style: TextStyle(
                  color: Colors.white.withOpacity(0.7),
                  fontSize: 12,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                time,
                style: TextStyle(
                  color: Colors.white.withOpacity(0.5),
                  fontSize: 11,
                ),
              ),
            ],
          ),
        ),
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
          decoration: BoxDecoration(
            color: statusColor.withOpacity(0.1),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: statusColor.withOpacity(0.3),
            ),
          ),
          child: Text(
            status,
            style: TextStyle(
              color: statusColor,
              fontSize: 12,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ],
    ),
  );
}
  Widget _buildSystemsOverview() {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.black,
          borderRadius: BorderRadius.circular(15),
          border: Border.all(
            color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
            width: 1,
          ),
          boxShadow: [
            BoxShadow(
              color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
              blurRadius: 20,
              spreadRadius: -5,
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'ACTIVE SYSTEMS',
              style: TextStyle(
                color: Theme.of(context).colorScheme.primary,
                fontSize: 16,
                fontWeight: FontWeight.bold,
                letterSpacing: 2,
              ),
            ),
            const SizedBox(height: 15),
            ...List.generate(
              systemItems.length,
              (index) => _buildSystemItem(index),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSystemItem(int index) {
    return Container(
      margin: const EdgeInsets.only(bottom: 15),
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: Colors.black,
        borderRadius: BorderRadius.circular(10),
        border: Border.all(
          color: Theme.of(context).colorScheme.primary.withOpacity(0.2),
        ),
        boxShadow: [
          BoxShadow(
            color: Theme.of(context).colorScheme.primary.withOpacity(0.05),
            blurRadius: 10,
            spreadRadius: -5,
          ),
        ],
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                systemItems[index],
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 5),
              Text(
                'Win Rate: ${systemValues[index]}%',
                style: TextStyle(
                  color: Theme.of(context).colorScheme.primary,
                  fontSize: 14,
                ),
              ),
            ],
          ),
          _buildPerformanceIndicator(systemValues[index]),
        ],
      ),
    );
  }

  Widget _buildPerformanceIndicator(double value) {
    Color indicatorColor = value >= 80 
        ? Colors.green 
        : value >= 70 
            ? Colors.orange 
            : Colors.red;
            
    return Container(
      width: 50,
      height: 50,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        border: Border.all(
          color: indicatorColor.withOpacity(0.5),
          width: 2,
        ),
        boxShadow: [
          BoxShadow(
            color: indicatorColor.withOpacity(0.2),
            blurRadius: 10,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Center(
        child: Text(
          '${value.toStringAsFixed(1)}',
          style: TextStyle(
            color: indicatorColor,
            fontWeight: FontWeight.bold,
            fontSize: 14,
          ),
        ),
      ),
    );
  }

  Widget _buildROIChart() {
    return Container(
      height: 300,
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.black,
        borderRadius: BorderRadius.circular(15),
        border: Border.all(
          color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
        ),
        boxShadow: [
          BoxShadow(
            color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
            blurRadius: 20,
            spreadRadius: -5,
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'ROI ANALYTICS',
            style: TextStyle(
              color: Theme.of(context).colorScheme.primary,
              fontSize: 16,
              fontWeight: FontWeight.bold,
              letterSpacing: 2,
            ),
          ),
          const SizedBox(height: 20),
          Expanded(
            child: LineChart(
              LineChartData(
                gridData: FlGridData(
                  show: true,
                  drawVerticalLine: true,
                  getDrawingHorizontalLine: (value) {
                    return FlLine(
                      color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                      strokeWidth: 1,
                    );
                  },
                  getDrawingVerticalLine: (value) {
                    return FlLine(
                      color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                      strokeWidth: 1,
                    );
                  },
                ),
                titlesData: FlTitlesData(
                  bottomTitles: AxisTitles(
                    sideTitles: SideTitles(
                      showTitles: true,
                      reservedSize: 22,
                      getTitlesWidget: (value, meta) {
                        const style = TextStyle(
                          color: Colors.white54,
                          fontSize: 12,
                        );
                        return SideTitleWidget(
                          axisSide: meta.axisSide,
                          child: Text('${value.toInt()}M', style: style),
                        );
                      },
                    ),
                  ),
                  leftTitles: AxisTitles(
                    sideTitles: SideTitles(
                      showTitles: true,
                      getTitlesWidget: (value, meta) {
                        return Text(
                          '${value.toInt()}%',
                          style: const TextStyle(
                            color: Colors.white54,
                            fontSize: 12,
                          ),
                        );
                      },
                    ),
                  ),
                  topTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                  rightTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                ),
                borderData: FlBorderData(show: false),
                lineBarsData: [
                  LineChartBarData(
                    spots: roiData,
                    isCurved: true,
                    color: Theme.of(context).colorScheme.primary,
                    barWidth: 3,
                    isStrokeCapRound: true,
                    dotData: FlDotData(show: false),
                    belowBarData: BarAreaData(
                      show: true,
                      color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFloatingActionButton() {
    return Positioned(
      bottom: 20,
      right: 20,
      child: GlowingActionButton(
        onPressed: () {
          // Add your create system logic here
        },
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: const [
            Icon(Icons.add),
            SizedBox(width: 8),
            Text('CREATE SYSTEM'),
          ],
        ),
      ),
    );
  }
}

// Custom Painters and Widgets

class CyberGridPainter extends CustomPainter {
  final Color color;

  CyberGridPainter({required this.color});

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = color
      ..strokeWidth = 0.5;

    // Draw vertical lines
    for (double i = 0; i < size.width; i += 20) {
      canvas.drawLine(Offset(i, 0), Offset(i, size.height), paint);
    }

    // Draw horizontal lines
    for (double i = 0; i < size.height; i += 20) {
      canvas.drawLine(Offset(0, i), Offset(size.width, i), paint);
    }
  }

  @override
  bool shouldRepaint(CyberGridPainter oldDelegate) => false;
}

class GlowingActionButton extends StatelessWidget {
  final VoidCallback onPressed;
  final Widget child;

  const GlowingActionButton({
    Key? key,
    required this.onPressed,
    required this.child,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(30),
        boxShadow: [
          BoxShadow(
            color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
            blurRadius: 20,
            spreadRadius: -5,
          ),
        ],
      ),
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: Theme.of(context).colorScheme.primary,
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(30),
          ),
        ),
        child: child,
      ),
    );
  }
}

// OLD CODE 'import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart'; // For the ROI chart.
import 'package:upsilon_sa/home/ui/boxes.dart'; // Assuming this imports the necessary custom boxes.

class SystemsPage extends StatefulWidget {
  const SystemsPage({super.key});

  @override
  State<SystemsPage> createState() => _SystemsPageState();
}

class _SystemsPageState extends State<SystemsPage> {
  // List of system titles
  final List<String> systemItems = ['System 1', 'System 2', 'System 3'];

  // List of friend titles (as an example)
  final List<String> friendItems = ['Friend 1', 'Friend 2', 'Friend 3'];

  // X data for the chart (ROI periods)
  final List<String> periods = ['1 Month', '3 Months', '6 Months', '1 Year'];

  // Y data for the chart (ROI data)
  final Map<String, List<FlSpot>> roiData = {
    '1 Month': [
      const FlSpot(1, 1.5),
      const FlSpot(2, 2.5),
      const FlSpot(3, 3.2)
    ],
    '3 Months': [
      const FlSpot(1, 2.1),
      const FlSpot(2, 2.8),
      const FlSpot(3, 3.7)
    ],
    '6 Months': [
      const FlSpot(1, 1.0),
      const FlSpot(2, 3.2),
      const FlSpot(3, 2.8)
    ],
    '1 Year': [
      const FlSpot(1, 1.5),
      const FlSpot(2, 3.0),
      const FlSpot(3, 4.5)
    ],
  };

  String selectedPeriod = '1 Month'; // Default period for the chart

  @override
  Widget build(BuildContext context) {
    // Define sizes for the boxes
    double boxWidth = MediaQuery.of(context).size.width * 0.55;
    double boxHeight = MediaQuery.of(context).size.height * 0.2;
    double systemsBoxWidth = MediaQuery.of(context).size.width * 0.8;
    double systemsBoxHeight = MediaQuery.of(context).size.height * 0.18;
    double chartBoxHeight = MediaQuery.of(context).size.height * 0.25;

    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: true,
        title: Text(
          "Systems Page",
          style: TextStyle(color: Theme.of(context).colorScheme.primary),
        ),
        centerTitle: true,
      ),
      body: Stack(
        children: [
          
          SingleChildScrollView(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // SystemsBox: Display system-related items
                const SizedBox(height: 20),
                SystemsBox(
                  systemItems: systemItems,
                  systemValues: const [
                    1.5,
                    -2.3,
                    0.0
                  ], 
                  height: systemsBoxHeight ,
                  width: systemsBoxWidth * 1.15,
                  title: "Systems",
                  icon: Icons.settings_outlined,
                ),
                const SizedBox(height: 20),
                SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      SizedBox(width: 15),
                      SystemsBox(
                        systemItems: systemItems,
                        systemValues: const [
                          1.5,
                          -2.3,
                          0.0
                        ], // Dummy ROI values for the systems
                        height: boxHeight,
                        width: boxWidth,
                        title: "Systems",
                        icon: Icons.settings_outlined,
                      ),
                      const SizedBox(width: 15),

                      // SocialSystemsBox: Social/Friends system box
                      SocialSystemsBox(
                        socialSystemItems: friendItems,
                        socialSystemValues: const [
                          1.0,
                          2.5,
                          -1.5
                        ], // Dummy friend values
                        height: boxHeight,
                        width: boxWidth,
                        title: "Friends",
                        icon: Icons.group,
                      ),
                      const SizedBox(width: 15),
                      DatasetsBox(width: boxWidth, height: boxHeight, title: 'Datasets', icon: Icons.perm_data_setting_outlined ),
                      const SizedBox(width: 15),
                    ],
                  ),
                ),

                const SizedBox(height: 20),

                // ROI Chart Box
                _buildRoiChartBox(context, chartBoxHeight),
              ],
            ),
          ),

          // Floating CreateButton
          const CreateButton(
            width: 140, // Adjust width
            height: 50, // Adjust height
          ),
        ],
      ),
    );
  }

  // Widget to build the ROI Chart Box
  Widget _buildRoiChartBox(BuildContext context, double chartHeight) {
    return Container(
      margin: const EdgeInsets.all(10),
      padding: const EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: Theme.of(context).cardColor,
        borderRadius: BorderRadius.circular(15),
        boxShadow: [
          BoxShadow(
            color: Theme.of(context).shadowColor.withOpacity(0.1),
            blurRadius: 10,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'ROI Over Time',
            style: Theme.of(context).textTheme.displaySmall,
          ),
          const SizedBox(height: 10),

          // Dropdown to select the period
          DropdownButton<String>(
            value: selectedPeriod,
            icon: const Icon(Icons.arrow_drop_down),
            onChanged: (String? newValue) {
              setState(() {
                selectedPeriod = newValue!;
              });
            },
            items: periods.map<DropdownMenuItem<String>>((String value) {
              return DropdownMenuItem<String>(
                value: value,
                child: Text(value),
              );
            }).toList(),
          ),
          const SizedBox(height: 10),

          // ROI Chart
          SizedBox(
            height: chartHeight,
            child: LineChart(
              LineChartData(
                gridData: const FlGridData(show: true),
                titlesData: const FlTitlesData(show: true),
                borderData: FlBorderData(show: true),
                lineBarsData: [
                  LineChartBarData(
                    spots: roiData[selectedPeriod]!,
                    isCurved: true,
                    barWidth: 4,
                    belowBarData: BarAreaData(show: true),
                    dotData: const FlDotData(show: true),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// The CreateButton widget
class CreateButton extends StatelessWidget {
  final double width;
  final double height;

  const CreateButton({
    required this.width,
    required this.height,
  });

  @override
  Widget build(BuildContext context) {
    return Positioned(
      bottom: 90, // Distance from bottom of screen
      right: 20, // Distance from right of screen
      child: SizedBox(
        width: width,
        height: height,
        child: FloatingActionButton.extended(
          onPressed: () {
            // Action for the button
            print('Create button pressed');
          },
          label: const Row(
            children: [
              Icon(Icons.add),
              SizedBox(width: 8),
              Text('Create'),
            ],
          ),
          focusColor: Theme.of(context).primaryColor,
        ),
      ),
    );
  }
}
